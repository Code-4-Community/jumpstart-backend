package com.codeforcommunity.database.seeder;

import com.codeforcommunity.database.records.CommentRecord;
import com.codeforcommunity.database.records.PostRecord;
import com.codeforcommunity.database.table.ICommentTable;
import com.codeforcommunity.database.table.IPostTable;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;

/**
 * This class is what we'll be using to seed the database. When starting out, the database should be
 * empty, so this will give you data to play around with. Later on, we'll use the data generated by
 * this to test our program and make sure everything is working well.
 */
public class Seeder {
  /**
   * A count of how many posts we want to make on startup for the in memory db. You can change this
   * to be whatever you want.
   */
  public static final int STUB_POST_COUNT = 15;
  /** The classic Lorem Ipsum text. For now this will be our stubbed data. */
  public static final String LOREM_IPSUM_TEXT =
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt "
          + "ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation "
          + "ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in "
          + "reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. "
          + "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia "
          + "deserunt mollit anim id est laborum.";

  /**
   * A static method for seeding the provided databases with default info.
   *
   * @param postCount A count of the posts the database will be supplied with.
   * @param postTable The {@link IPostTable} to seed.
   * @param commentTable The {@link ICommentTable} to seed.
   */
  public static void seedDatabase(int postCount, IPostTable postTable, ICommentTable commentTable) {
    // The Random object we'll be using for getting random data.
    Random random = new Random();

    // Loop through and create stubPostCount amount of posts.
    for (int i = 0; i < postCount; i++) {
      // Get a length we'll want to use to select text.
      int textLength = random.nextInt(LOREM_IPSUM_TEXT.length());
      // Select a substring of textLength characters from the Lorem Ipsum text.
      String body = LOREM_IPSUM_TEXT.substring(0, textLength);
      // Create a new post with the generated data from above.
      PostRecord post = new PostRecord("Author " + i % 5, "Post #" + i, body);
      postTable.savePost(post);

      // Generate comments for the post. For post 0, STUB_POST_COUNT comments will be generated.
      // For post STUB_POST_COUNT - 1 (the last post being generated), 0 comments will be generated.
      // This will give us a predictable comment count on each post for testing later on.
      for (int j = 0; j < STUB_POST_COUNT - i; j++) {
        // Create comment length like we did for the post body length above.
        int commentLength = random.nextInt(LOREM_IPSUM_TEXT.length());
        // Get comment body like above.
        String commentBody = LOREM_IPSUM_TEXT.substring(0, commentLength);
        // Create the comment like above.
        CommentRecord comment =
            new CommentRecord(i, String.format("Comment Author %d%d", i, j), commentBody);
        // Add the comment to our database.
        commentTable.saveComment(comment);
      }
    }
  }

  /**
   * Create a random date/time in the form of a string.
   *
   * @return A date in the form of a string.
   */
  public static String getCurrentDateTime() {
    // Get the current date/time and format it.
    return DateTimeFormatter.ofPattern("MM-dd-yyyy HH:mm").format(LocalDateTime.now());
  }
}
